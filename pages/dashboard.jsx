import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import Head from "next/head";
import axios from "axios";

import LoadingOverlay from "../components/LoadingOverlay";
import CreateNote from "../components/CreateNote";

export default function Dashboard({ token, setToken }) {
  const router = useRouter();

  const [profile, setProfile] = useState(null);
  const [isLoading, setLoadingStatus] = useState(true);
  const [notes, setNotes] = useState([]);

  const refreshCallback = useCallback(() => {
    axios
      .get(`${process.env.API_URL}/notes/`, {
        headers: { Authorization: token },
      })
      .then((resp) => {
        setNotes(resp.data);
      })
      .catch(
        (err) => {
          let message;

          switch (err.response.status) {
            case 401:
              message = "invalid session";
              setToken("");
              break;

            default:
              message = "unknown error";
          }

          toast.error(`Error while retrieving notes: ${message}`, {
            id: "dashboard",
          });
        },
        [token]
      );
  }, [token]);

  const logoutCallback = useCallback(() => {
    setLoadingStatus(true);
    toast.loading("Logging out...", { id: "logout" });

    axios
      .get(`${process.env.API_URL}/auth/logout`, {
        headers: { Authorization: token },
      })
      .then((resp) => {
        setToken("");
        toast.success("Logged out successfully.", { id: "logout" });
      })
      .catch(
        (err) => {
          toast.error(`Error while logging out: ${err.toString()}`, {
            id: "logout",
          });
        },
        [token]
      )
      .finally(() => [setLoadingStatus(false)]);
  }, [token]);

  useEffect(() => {
    if (!token) router.push("/");
  }, [token]);

  useEffect(() => {
    if (token) {
      axios
        .get(`${process.env.API_URL}/auth/current`, {
          headers: { Authorization: token },
        })
        .then((resp) => {
          setProfile(resp.data);
          setLoadingStatus(false);
        })
        .catch((err) => {
          let message;

          switch (err.response.status) {
            case 401:
              message = "invalid session";
              setToken("");
              break;

            default:
              message = "unknown error";
          }
          toast.error(`Something went wrong: ${message}`, {
            id: "dashboard",
          });
        });
    }
  }, [token]);

  useEffect(() => {
    if (token) refreshCallback();
  }, [token, refreshCallback]);

  return (
    <>
      <Head>
        <title>Dashboard | Journal App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <LoadingOverlay isLoading={isLoading}></LoadingOverlay>
      <div className="min-vh-100 d-flex flex-column bg-light">
        <main className="container px-3 py-5 mt-auto">
          <div className="row g-4">
            <div className="col-12 d-flex flex-column align-items-center justify-content-center">
              <h1 className="text-center">
                {profile ? profile.username : null}&apos;s space
              </h1>
            </div>
            <div className="col-12 d-flex align-items-center justify-content-center">
              <button
                type="button"
                className="btn btn-danger"
                onClick={logoutCallback}
              >
                <i className="fas fa-sign-out-alt"></i> Logout
              </button>
            </div>
            <div className="col-12 d-flex flex-column align-items-center justify-content-center">
              <div className="card p-3">
                <div className="card-body container">
                  <div className="row g-3">
                    <div className="col">
                      <h2 className="card-title m-0">Notes</h2>
                    </div>
                    <div className="col d-flex justify-content-end">
                      <CreateNote
                        token={token}
                        refreshCallback={refreshCallback}
                      />
                      <button
                        className="btn btn-success"
                        onClick={refreshCallback}
                      >
                        <i className="fas fa-sync-alt"></i>
                        <span className="visually-hidden">Refresh notes</span>
                      </button>
                    </div>
                  </div>
                  <hr />
                  {notes.length ? (
                    <div className="row g-3 justify-content-center">
                      {notes.map((note) => (
                        <div className="col-auto" key={note.id}>
                          <div className="card">
                            <div className="card-header fw-bold d-flex">
                              <div className="me-auto">
                                <h3 className="h5 my-1">{note.title}</h3>
                              </div>
                              <div className="ms-3 d-flex">
                                <button
                                  className="btn btn-light me-1"
                                  onClick={() =>
                                    router.push(`/notes/${note.id}/update`)
                                  }
                                >
                                  <i className="fas fa-edit" />
                                </button>
                                <button
                                  className="btn btn-light"
                                  onClick={() =>
                                    router.push(`/notes/${note.id}/delete`)
                                  }
                                >
                                  <i className="fas fa-times" />
                                </button>
                              </div>
                            </div>
                            <div
                              className="card-body overflow-auto"
                              style={{ maxHeight: "20rem" }}
                            >
                              <p
                                className="card-text font-monospace"
                                style={{ whiteSpace: "pre-wrap" }}
                              >
                                {note.body}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="card-text">
                      There is no note to display yet. How about creating one?
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </main>
        <footer className="mt-auto">
          <p className="text-center">
            Â© 2021 Alvito Raidhy Trinanda. MIT Licensed.
          </p>
        </footer>
      </div>
    </>
  );
}
