import { useState, useCallback, useEffect } from "react";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import Head from "next/head";
import axios from "axios";

export default function Home({ token, setToken }) {
  const router = useRouter();

  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const [isLoading, setLoadingStatus] = useState(false);

  useEffect(() => {
    if (token) router.push("/dashboard");
  }, [token]);

  const loginCallback = useCallback(() => {
    setLoadingStatus(true);
    toast.loading("Logging in...", { id: "login" });

    axios
      .post(`${process.env.API_URL}/auth/login`, {
        username,
        password,
      })
      .then((resp) => {
        toast.success("Successfully logged in. Welcome back!", { id: "login" });
        setToken(resp.data.token);
      })
      .catch((err) => {
        let message;

        switch (err.response.status) {
          case 422:
            message = "username or password is not valid";
            break;

          case 400:
            message = "wrong username or password";
            break;

          default:
            message = "unknown error";
        }
        toast.error(`Login failed: ${message}`, { id: "login" });
      })
      .finally(() => {
        setLoadingStatus(false);
      });
  }, [username, password]);

  const registerCallback = useCallback(() => {
    setLoadingStatus(true);
    toast.loading("Registering...", { id: "register" });

    axios
      .post(`${process.env.API_URL}/auth/register`, {
        username,
        password,
      })
      .then((resp) => {
        toast.success("Successfully registered!", { id: "register" });
        setToken(resp.data.token);
      })
      .catch((err) => {
        let message;

        switch (err.response.status) {
          case 422:
            message = "username or password is not valid";
            break;

          case 409:
            message = "a user with the same username already exists";
            break;

          default:
            message = "unknown error";
        }

        toast.error(`Register failed: ${message}`, { id: "register" });
      })
      .finally(() => {
        setLoadingStatus(false);
      });
  }, [username, password]);

  return (
    <>
      <Head>
        <title>Journal App | Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-vh-100 d-flex flex-column bg-light">
        <main className="container px-3 py-5 mt-auto">
          <div className="row g-4">
            <div className="col-sm-12 col-md-6 d-flex flex-column align-items-center justify-content-center">
              <h1 className="text-center">Journal App</h1>
            </div>
            <div className="col-sm-12 col-md-6 d-flex flex-column align-items-center justify-content-center">
              <div className="card p-3">
                <div className="card-body">
                  <h2 className="card-title">Log In</h2>
                  <p className="card-text">
                    It seems that you are not logged in yet. Please log in to
                    view, add, edit, or remove your notes.
                  </p>
                  <hr />
                  <form action="">
                    <div className="mb-3">
                      <label htmlFor="username" className="form-label fw-bold">
                        Username
                      </label>
                      <input
                        type="text"
                        className="form-control"
                        id="username"
                        placeholder="john.doe"
                        onChange={(e) => setUsername(e.target.value)}
                        value={username}
                        disabled={isLoading}
                      />
                    </div>
                    <div className="mb-3">
                      <label htmlFor="password" className="form-label fw-bold">
                        Password
                      </label>
                      <input
                        type="password"
                        className="form-control"
                        id="password"
                        placeholder="********"
                        onChange={(e) => setPassword(e.target.value)}
                        value={password}
                        disabled={isLoading}
                      />
                    </div>
                    <div className="mt-4">
                      <button
                        type="button"
                        className="btn btn-primary me-2"
                        onClick={loginCallback}
                        disabled={isLoading}
                      >
                        Login
                      </button>
                      <button
                        type="button"
                        className="btn btn-success"
                        onClick={registerCallback}
                        disabled={isLoading}
                      >
                        Register
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </main>
        <footer className="mt-auto">
          <p className="text-center">
            Â© 2021 Alvito Raidhy Trinanda. MIT Licensed.
          </p>
        </footer>
      </div>
    </>
  );
}
